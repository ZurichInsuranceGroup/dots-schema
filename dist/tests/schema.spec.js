"use strict";
var isEmpty = require("lodash.isempty");
var chai_1 = require("chai");
var dots_schema_1 = require("../dots-schema");
describe('Schema', function () {
    it('can validate a simple Object', function () {
        var schema = new dots_schema_1.Schema({
            string: {
                type: String
            },
            number: {
                type: Number
            },
            date: {
                type: Date
            },
            optional: {
                type: String,
                optional: true
            },
            allowed: {
                type: Number,
                allowedValues: [1, 2, 3]
            }
        });
        var result = schema.validate({
            string: 'test',
            number: 1,
            date: new Date(),
            allowed: 1
        });
        chai_1.expect(result).to.equal(null);
        result = schema.validate({
            string: 1,
            number: 'test',
            date: false,
            optional: 5,
            allowed: 4
        });
        chai_1.expect(result).not.to.equal(null);
        if (result) {
            chai_1.expect(result.getErrors().length).to.equal(5);
        }
    });
    it('cleans without mutate per default', function () {
        var schema = new dots_schema_1.Schema({
            string: {
                type: String
            }
        });
        var object = {
            string: 1
        };
        var result = schema.clean(object);
        chai_1.expect(result.string).to.equal('1');
        chai_1.expect(object.string).to.equal(1);
    });
    it('can validate with auto cleaning', function () {
        var schema = new dots_schema_1.Schema({
            string: {
                type: String
            }
        });
        // clean without mutate
        var object = {
            string: 1
        };
        var result = schema.validate(object, {
            autoClean: true
        });
        chai_1.expect(object.string).to.equal(1);
        chai_1.expect(result).to.equal(null);
        // clean with mutate
        object = {
            string: 1
        };
        result = schema.validate(object, {
            autoClean: true,
            mutate: true
        });
        chai_1.expect(object.string).to.equal('1');
        chai_1.expect(result).to.equal(null);
        // disable clean
        object = {
            string: 1
        };
        result = schema.validate(object, {
            autoClean: false
        });
        chai_1.expect(object.string).to.equal(1);
        chai_1.expect(result).not.to.equal(null);
    });
    it('can use custom validators', function () {
        var object = {
            something: 'yo'
        };
        var schema = new dots_schema_1.Schema({
            something: {
                type: String,
                custom: function (value, object, context) {
                    if (object.something === 'yo') {
                        return 'not valid';
                    }
                    return null;
                }
            }
        });
        var result = schema.validate(object);
        chai_1.expect(result).not.to.equal(null);
        if (result) {
            chai_1.expect(result.getErrors().length).to.equal(1);
            chai_1.expect(result.getErrors()[0].rule).to.equal('custom');
            chai_1.expect(result.getErrors()[0].property).to.equal('something');
            chai_1.expect(result.getErrors()[0].message).to.equal('not valid');
            var validators = schema.getValidators('something');
            var error = validators.custom(object.something, object);
            chai_1.expect(error.property).to.equal('something');
            chai_1.expect(error.rule).to.equal('custom');
        }
        var parentSchema = new dots_schema_1.Schema({
            child: {
                type: schema
            }
        });
        var parent = {
            child: object
        };
        result = parentSchema.validate(parent);
        chai_1.expect(result).not.to.equal(null);
        if (result) {
            chai_1.expect(result.getErrors().length).to.equal(1);
            chai_1.expect(result.getErrors()[0].property).to.equal('child.something');
        }
    });
    it('can use custom validator objects', function () {
        var object = {
            something: 'yo'
        };
        var schema = new dots_schema_1.Schema({
            something: {
                type: String,
                custom: {
                    custom1: function (value, object, context) {
                        chai_1.expect(value).to.equal('yo');
                        chai_1.expect(object).to.equal(object);
                        chai_1.expect(isEmpty(context)).to.equal(true);
                        return '1';
                    },
                    custom2: function (value, object, context) {
                        chai_1.expect(value).to.equal('yo');
                        chai_1.expect(object).to.equal(object);
                        chai_1.expect(isEmpty(context)).to.equal(true);
                        return '2';
                    }
                }
            }
        });
        var result = schema.validate(object);
        chai_1.expect(result).not.to.equal(null);
        if (result) {
            chai_1.expect(result.getErrors().length).to.equal(2);
            chai_1.expect(result.getErrors()[0].rule).to.equal('custom1');
            chai_1.expect(result.getErrors()[0].property).to.equal('something');
            chai_1.expect(result.getErrors()[0].message).to.equal('1');
            chai_1.expect(result.getErrors()[1].rule).to.equal('custom2');
            chai_1.expect(result.getErrors()[1].property).to.equal('something');
            chai_1.expect(result.getErrors()[1].message).to.equal('2');
        }
        schema = new dots_schema_1.Schema({
            something: {
                type: String,
                custom: {
                    custom1: function (value, object, context) {
                        chai_1.expect(value).to.equal('yo');
                        chai_1.expect(object).to.equal(object);
                        return context === 1 ? null : 'missing context';
                    }
                }
            }
        });
        var validators = schema.getValidators('something');
        var error = validators.custom1(object.something, object);
        chai_1.expect(error.property).to.equal('something');
        chai_1.expect(error.rule).to.equal('custom1');
        error = validators.custom1(object.something, object, {
            context: 1
        });
        chai_1.expect(error).to.equal(null);
        schema = new dots_schema_1.Schema({
            something: {
                type: String,
                custom: {
                    custom1: function (value, object, context) {
                        chai_1.expect(value).to.equal('yo');
                        chai_1.expect(object).to.equal(object);
                        return context === 1 ? null : 'missing context';
                    }
                }
            }
        });
        validators = schema.getValidators(object, {
            context: 1
        });
        error = validators.something.custom1(object.something);
        chai_1.expect(error).to.equal(null);
    });
    it('can validate single keys', function () {
        var schema = new dots_schema_1.Schema({
            string: {
                type: String
            },
            number: {
                type: Number
            },
            date: {
                type: Date
            },
            optional: {
                type: String,
                optional: true
            },
            allowed: {
                type: Number,
                allowedValues: [1, 2, 3]
            }
        });
        var result = schema.validate({
            string: 'test',
            number: 1,
            date: new Date(),
            allowed: 1
        }, 'string');
        chai_1.expect(result).to.equal(null);
        result = schema.validate({
            string: 1,
            number: 'test',
            date: false,
            optional: 5,
            allowed: 4
        }, 'string');
        chai_1.expect(result).not.to.equal(null);
        if (result) {
            chai_1.expect(result.getErrors().length).to.equal(1);
        }
    });
    it('can create a set of validators', function () {
        var schema = new dots_schema_1.Schema({
            string: {
                type: String,
                max: 5
            },
            number: {
                type: Number,
                min: 3
            },
            date: {
                type: Date
            },
            optional: {
                type: String,
                optional: true
            },
            allowed: {
                type: Number,
                allowedValues: [1, 2, 3]
            }
        });
        var validators = schema.getValidators();
        chai_1.expect(Object.keys(validators).length).to.equal(5);
        chai_1.expect(Object.keys(validators.string).length).to.equal(3);
        chai_1.expect(validators.string.type).to.be.a('function');
        chai_1.expect(validators.string.required).to.be.a('function');
        chai_1.expect(validators.string.max).to.be.a('function');
        chai_1.expect(validators.number.type).to.be.a('function');
        chai_1.expect(validators.number.required).to.be.a('function');
        chai_1.expect(validators.date.type).to.be.a('function');
        chai_1.expect(validators.date.required).to.be.a('function');
        chai_1.expect(Object.keys(validators.optional).length).to.equal(1);
        chai_1.expect(validators.optional.type).to.be.a('function');
        chai_1.expect(Object.keys(validators.allowed).length).to.equal(3);
        chai_1.expect(validators.allowed.type).to.be.a('function');
        chai_1.expect(validators.allowed.required).to.be.a('function');
        chai_1.expect(validators.allowed.allowedValues).to.be.a('function');
        var fieldValidators = schema.getValidators('string');
        chai_1.expect(Object.keys(fieldValidators).length).to.equal(3);
        chai_1.expect(fieldValidators.type).to.be.a('function');
        chai_1.expect(fieldValidators.required).to.be.a('function');
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
