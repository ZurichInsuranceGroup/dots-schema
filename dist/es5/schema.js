"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('./composed-validation-result');
var root_validator_1 = require('./validators/root-validator');
var Schema = (function () {
    function Schema(schema, options) {
        if (options === void 0) { options = {}; }
        this.schema = schema;
        this.options = options;
        _.defaults(options, Schema.DefaultOptions);
    }
    Schema.prototype.validateKey = function (value, key, object, options) {
        var rootValidator = new root_validator_1.RootValidator();
        var definition = this.schema[key];
        if (definition.type instanceof Function || definition.type instanceof Schema || _.isObject(definition.type)) {
            var result = rootValidator.validate(key, definition, value, options);
            if (typeof definition.custom === 'function') {
                var custom = definition.custom(value, object, options.context);
                if (custom) {
                    result.and({
                        property: key,
                        rule: 'custom',
                        message: custom
                    });
                }
            }
            else if (typeof definition.custom === 'object') {
                for (var rule in definition.custom) {
                    if (definition.custom.hasOwnProperty(rule)) {
                        var custom = definition.custom[rule](value, object, options.context);
                        if (custom) {
                            result.and({
                                property: key,
                                rule: rule,
                                message: custom
                            });
                        }
                    }
                }
            }
            return result;
        }
        else {
            throw new Error("Invalid type '" + definition.type + "' used in " + this.name);
        }
    };
    Schema.prototype.cleanKey = function (key, object, options) {
        if (options === void 0) { options = {}; }
        var rootValidator = new root_validator_1.RootValidator();
        var definition = this.schema[key];
        if (definition.type instanceof Function || definition.type instanceof Schema || _.isObject(definition.type)) {
            return rootValidator.clean(definition, object[key], options, object);
        }
        else {
            throw new Error("Invalid type '" + definition.type + "' used in " + this.name);
        }
    };
    Schema.prototype.validate = function (object, key, options) {
        if (typeof options === 'undefined' && _.isObject(key)) {
            options = key;
        }
        options = _.defaults(options || {}, Schema.DefaultOptions);
        if (typeof key !== 'string') {
            if (options.clean) {
                var cleanOptions = _.defaults(options.clean, Schema.DefaultCleanOptions);
                object = this.clean(object, cleanOptions);
            }
            var result = new composed_validation_result_1.ComposedValidationResult();
            for (var key_1 in this.schema) {
                if (this.schema.hasOwnProperty(key_1)) {
                    result.and(this.validateKey(object[key_1], key_1, object, options));
                }
            }
            return result;
        }
        else {
            if (options.clean) {
                var cleanOptions = _.defaults(options.clean, Schema.DefaultCleanOptions);
                object = this.cleanKey(key, object, cleanOptions);
            }
            var result = this.validateKey(object[key], key, object, options);
            return result.isValid() ? null : result;
        }
    };
    Schema.prototype.clean = function (object, options) {
        if (options === void 0) { options = {}; }
        if (typeof object === 'undefined' || object === null) {
            return object;
        }
        _.defaults(options, Schema.DefaultCleanOptions);
        var result = options.mutate ? object : _.cloneDeep(object);
        for (var key in this.schema) {
            if (this.schema.hasOwnProperty(key)) {
                result[key] = this.cleanKey(key, object, options);
            }
        }
        return result;
    };
    Schema.prototype.extend = function (schema) {
        return this;
    };
    Schema.prototype.getValidators = function (key, object, options) {
        if (typeof key === 'string') {
            options = typeof options === 'object' ? _.defaults(options, this.options) : this.options;
            return root_validator_1.RootValidator.getValidatorsForKey(key, this.schema[key], options, object);
        }
        else {
            options = object;
            object = key;
            options = typeof options === 'object' ? _.defaults(options, this.options) : this.options;
            var validators = {};
            for (var key_2 in this.schema) {
                if (this.schema.hasOwnProperty(key_2)) {
                    var keyValidators = {};
                    _.assign(keyValidators, root_validator_1.RootValidator.getValidatorsForKey(key_2, this.schema[key_2], options, object));
                    validators[key_2] = keyValidators;
                }
            }
            return validators;
        }
    };
    Schema.DefaultOptions = {
        name: 'Schema',
        clean: false,
        strict: false,
        context: {}
    };
    Schema.DefaultCleanOptions = {
        mutate: false,
        trimStrings: true,
        removeEmptyStrings: true,
        removeEmptyObjects: true,
        rounding: 'round',
        filter: false,
        autoConvert: true,
        getAutoValues: true
    };
    Schema.RegEx = {
        Email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
    };
    return Schema;
}());
exports.Schema = Schema;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
