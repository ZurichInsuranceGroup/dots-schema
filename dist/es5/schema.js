"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('./composed-validation-result');
var root_validator_1 = require('./validators/root-validator');
var Schema = (function () {
    function Schema(schema, options) {
        if (options === void 0) { options = {}; }
        this.schema = schema;
        this.options = options;
        _.defaults(options, Schema.DefaultOptions);
    }
    Schema.prototype.cleanKey = function (key, object, options) {
        if (options === void 0) { options = {}; }
        var definition = this.schema[key];
        if (definition.type instanceof Function || definition.type instanceof Schema || _.isObject(definition.type)) {
            return root_validator_1.RootValidator.clean(definition, object[key], options, object);
        }
        else {
            throw new Error("Invalid type '" + definition.type + "' used in " + this.name);
        }
    };
    Schema.prototype.validate = function (object, key, options) {
        if (typeof key === 'string') {
            options = _.defaults({}, options, Schema.DefaultOptions);
            var validator = this.getValidator(key, object, options);
            if (options.clean) {
                var cleanOptions = _.defaults({}, options.clean, Schema.DefaultCleanOptions);
                object = this.clean(object, cleanOptions);
            }
            return validator(object, object, options);
        }
        else {
            options = _.defaults({}, key, Schema.DefaultOptions);
            var validator = this.getValidator(object, options);
            if (options.clean) {
                var cleanOptions = _.defaults({}, options.clean, Schema.DefaultCleanOptions);
                object = this.clean(object, cleanOptions);
            }
            return validator(object, object, options);
        }
    };
    Schema.prototype.clean = function (object, options) {
        if (options === void 0) { options = {}; }
        if (typeof object === 'undefined' || object === null) {
            return object;
        }
        _.defaults(options, Schema.DefaultCleanOptions);
        var result = options.mutate ? object : _.cloneDeep(object);
        for (var key in this.schema) {
            if (this.schema.hasOwnProperty(key)) {
                result[key] = this.cleanKey(key, object, options);
            }
        }
        return result;
    };
    Schema.prototype.extend = function (schema) {
        return this;
    };
    Schema.prototype._getValidators = function (object, options) {
        options = typeof options === 'object' ? _.defaults(options, this.options) : this.options;
        var validators = {};
        for (var key in this.schema) {
            if (this.schema.hasOwnProperty(key)) {
                var keyValidators = {};
                _.assign(keyValidators, root_validator_1.RootValidator.getValidatorsForKey(key, this.schema[key], options, object));
                validators[key] = keyValidators;
            }
        }
        return validators;
    };
    Schema.prototype._getValidatorsForKey = function (key, object, options) {
        options = typeof options === 'object' ? _.defaults(options, this.options) : this.options;
        return root_validator_1.RootValidator.getValidatorsForKey(key, this.schema[key], options, object);
    };
    Schema.prototype.getValidators = function (key, object, options) {
        if (typeof key === 'string') {
            return this._getValidatorsForKey(key, object, options);
        }
        else {
            return this._getValidators(key, object);
        }
    };
    Schema.prototype._getValidatorForKey = function (property, object, options) {
        var validators = this.getValidators(object, options);
        return function (value, object, options) {
            var result = new composed_validation_result_1.ComposedValidationResult();
            if (validators.hasOwnProperty(property)) {
                var propertyValidators = validators[property];
                for (var rule in propertyValidators) {
                    if (propertyValidators.hasOwnProperty(rule)) {
                        var validator = propertyValidators[rule];
                        var error = validator(value[property], object, options);
                        if (typeof error === 'string') {
                            result.and({
                                property: property,
                                rule: rule,
                                message: error
                            });
                        }
                        else if (typeof error === 'object') {
                            result.and(error);
                        }
                    }
                }
            }
            return result.isValid() ? null : result;
        };
    };
    Schema.prototype._getValidator = function (object, options) {
        var validators = this.getValidators(object, options);
        return function (value, object, options) {
            var result = new composed_validation_result_1.ComposedValidationResult();
            for (var property in validators) {
                if (validators.hasOwnProperty(property)) {
                    var propertyValidators = validators[property];
                    for (var rule in propertyValidators) {
                        if (propertyValidators.hasOwnProperty(rule)) {
                            var validator = propertyValidators[rule];
                            var error = validator(value[property], object, options);
                            if (typeof error === 'string') {
                                result.and({
                                    property: property,
                                    rule: rule,
                                    message: error
                                });
                            }
                            else if (typeof error === 'object') {
                                result.and(error);
                            }
                        }
                    }
                }
            }
            return result.isValid() ? null : result;
        };
    };
    Schema.prototype.getValidator = function (key, object, options) {
        if (typeof key === 'string') {
            return this._getValidatorForKey(key, object, options);
        }
        else {
            return this._getValidator(key, object);
        }
    };
    Schema.DefaultOptions = {
        name: 'Schema',
        clean: false,
        strict: false,
        context: {}
    };
    Schema.DefaultCleanOptions = {
        mutate: false,
        trimStrings: true,
        removeEmptyStrings: true,
        removeEmptyObjects: true,
        rounding: 'round',
        filter: false,
        autoConvert: true,
        getAutoValues: true
    };
    Schema.RegEx = {
        Email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
    };
    return Schema;
}());
exports.Schema = Schema;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
