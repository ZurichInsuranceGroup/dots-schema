"use strict";
var _ = require('lodash');
var root_validator_1 = require('./validators/root-validator');
var schema_1 = require('./schema');
function cleaned(validator, key, definition, options, defaultObject, custom, rule) {
    var defaultOptions = options;
    var defaultCleanOptions = typeof options.clean === 'object' ? _.defaults({}, options.clean, schema_1.Schema.DefaultCleanOptions) : _.defaults({}, schema_1.Schema.DefaultCleanOptions);
    return function (value, object, options) {
        var cleanOptions = defaultCleanOptions;
        options = _.assign({}, defaultOptions, options);
        object = typeof object !== 'undefined' ? object : defaultObject;
        if (options.clean) {
            var cleanOptions_1 = options.clean === 'object' ? _.assign({}, defaultCleanOptions, options.clean) : _.assign({}, defaultCleanOptions);
            value = root_validator_1.RootValidator.clean(definition, value, cleanOptions_1, object);
        }
        return validator(value, key, definition, object, options, custom, rule);
    };
}
exports.cleaned = cleaned;
var connectSchema = function (schema, object, context) {
    var validators = schema.getValidators();
    var connected = {};
    for (var field in validators) {
        if (validators.hasOwnProperty(field)) {
            var fieldValidators = validators[field];
            var fieldConnected = {};
            for (var rule in fieldValidators) {
                if (fieldValidators.hasOwnProperty(rule)) {
                    fieldConnected[rule] = _.partialRight(fieldValidators[rule], object, {
                        context: context,
                        clean: true
                    });
                }
            }
            connected[field] = fieldConnected;
        }
    }
    return connected;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUM7SUFDTCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQTtBQUNwQixDQUFDLENBQUEiLCJmaWxlIjoiY2xlYW5lZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJ1xuXG5pbXBvcnQge1xuICAgIFZhbGlkYXRpb25EZWZpbml0aW9uLFxuICAgIERlZmluaXRpb25UeXBlLFxuICAgIFZhbGlkYXRpb25SZXN1bHQsXG4gICAgVmFsaWRhdGlvbk9wdGlvbnMsXG4gICAgVmFsaWRhdGlvbkVycm9yLFxuICAgIENsZWFuT3B0aW9uc1xufSBmcm9tICcuL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBSb290VmFsaWRhdG9yIH0gZnJvbSAnLi92YWxpZGF0b3JzL3Jvb3QtdmFsaWRhdG9yJ1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbmVkKHZhbGlkYXRvcjogYW55LCBrZXk6IHN0cmluZywgZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24sIG9wdGlvbnM6IFZhbGlkYXRpb25PcHRpb25zLCBkZWZhdWx0T2JqZWN0PzogYW55LCBjdXN0b20/OiBGdW5jdGlvbiwgcnVsZT86IHN0cmluZyk6IEZ1bmN0aW9uIHtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnNcbiAgICBjb25zdCBkZWZhdWx0Q2xlYW5PcHRpb25zID0gdHlwZW9mIG9wdGlvbnMuY2xlYW4gPT09ICdvYmplY3QnID8gXy5kZWZhdWx0cyh7fSwgb3B0aW9ucy5jbGVhbiwgU2NoZW1hLkRlZmF1bHRDbGVhbk9wdGlvbnMpIDogXy5kZWZhdWx0cyh7fSwgU2NoZW1hLkRlZmF1bHRDbGVhbk9wdGlvbnMpXG5cbiAgICByZXR1cm4gKHZhbHVlOiBhbnksIG9iamVjdD86IGFueSwgb3B0aW9ucz86IFZhbGlkYXRpb25PcHRpb25zKSA9PiB7XG4gICAgICAgIGxldCBjbGVhbk9wdGlvbnMgPSBkZWZhdWx0Q2xlYW5PcHRpb25zXG4gICAgICAgIG9wdGlvbnMgPSBfLmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG5cbiAgICAgICAgb2JqZWN0ID0gdHlwZW9mIG9iamVjdCAhPT0gJ3VuZGVmaW5lZCcgPyBvYmplY3QgOiBkZWZhdWx0T2JqZWN0XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2xlYW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuT3B0aW9ucyA9IG9wdGlvbnMuY2xlYW4gPT09ICdvYmplY3QnID8gXy5hc3NpZ24oe30sIGRlZmF1bHRDbGVhbk9wdGlvbnMsIG9wdGlvbnMuY2xlYW4pIDogXy5hc3NpZ24oe30sIGRlZmF1bHRDbGVhbk9wdGlvbnMpXG4gICAgICAgICAgICB2YWx1ZSA9IFJvb3RWYWxpZGF0b3IuY2xlYW4oZGVmaW5pdGlvbiwgdmFsdWUsIGNsZWFuT3B0aW9ucywgb2JqZWN0KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcih2YWx1ZSwga2V5LCBkZWZpbml0aW9uLCBvYmplY3QsIG9wdGlvbnMsIGN1c3RvbSwgcnVsZSlcbiAgICB9XG59XG5cbmNvbnN0IGNvbm5lY3RTY2hlbWEgPSAoc2NoZW1hOiBTY2hlbWEsIG9iamVjdDogYW55LCBjb250ZXh0OiBhbnkpOiBhbnkgPT4ge1xuICAgIGNvbnN0IHZhbGlkYXRvcnMgPSBzY2hlbWEuZ2V0VmFsaWRhdG9ycygpXG4gICAgY29uc3QgY29ubmVjdGVkOiBhbnkgPSB7fVxuXG4gICAgZm9yIChsZXQgZmllbGQgaW4gdmFsaWRhdG9ycykge1xuICAgICAgICBpZiAodmFsaWRhdG9ycy5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsaWRhdG9ycyA9IHZhbGlkYXRvcnNbZmllbGRdXG4gICAgICAgICAgICBjb25zdCBmaWVsZENvbm5lY3RlZDogYW55ID0ge31cbiAgICAgICAgICAgIGZvciAobGV0IHJ1bGUgaW4gZmllbGRWYWxpZGF0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkVmFsaWRhdG9ycy5oYXNPd25Qcm9wZXJ0eShydWxlKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZENvbm5lY3RlZFtydWxlXSA9IF8ucGFydGlhbFJpZ2h0KGZpZWxkVmFsaWRhdG9yc1tydWxlXSwgb2JqZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW46IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uZWN0ZWRbZmllbGRdID0gZmllbGRDb25uZWN0ZWRcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29ubmVjdGVkXG59XG4iXX0=
