"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var cleaned_1 = require('../cleaned');
var NumberValidator = (function () {
    function NumberValidator() {
    }
    NumberValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned_1.cleaned(NumberValidator.RULES.type, key, definition, options)
        };
        if (definition.min) {
            _.assign(validators, cleaned_1.cleaned(NumberValidator.RULES.min, key, definition, options));
        }
        if (definition.max) {
            _.assign(validators, cleaned_1.cleaned(NumberValidator.RULES.max, key, definition, options));
        }
        return validators;
    };
    NumberValidator.prototype.validate = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var rules = NumberValidator.RULES;
        result.and(rules.type(value, key, definition));
        if (result.isValid()) {
            result.and(rules.min(value, key, definition));
            result.and(rules.max(value, key, definition));
        }
        return result;
    };
    NumberValidator.prototype.clean = function (definition, value, options, object) {
        if (!options.autoConvert) {
            return value;
        }
        if (typeof value === 'string') {
            var result = parseFloat(value);
            if (_.isNaN(result)) {
                return value;
            }
            value = result;
        }
        if (typeof value === 'number') {
            if (definition.decimal) {
                return value;
            }
            else {
                var rounding = definition.rounding ? definition.rounding : options.rounding;
                switch (rounding) {
                    case 'round':
                        return Math.round(value);
                    case 'floor':
                        return Math.floor(value);
                    case 'ceil':
                        return Math.ceil(value);
                }
            }
        }
        return value;
    };
    NumberValidator.RULES = {
        type: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'number') {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be of type Number"
                };
            }
            return null;
        },
        min: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.min === 'number') && value < definition.min) {
                return {
                    property: key,
                    rule: 'min',
                    message: "Property " + key + " must be greater than " + definition.min
                };
            }
            return null;
        },
        max: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.max === 'number') && value > definition.max) {
                return {
                    property: key,
                    rule: 'max',
                    message: "Property " + key + " must be greater than " + definition.max
                };
            }
            return null;
        }
    };
    return NumberValidator;
}());
exports.NumberValidator = NumberValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
