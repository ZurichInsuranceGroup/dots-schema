"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var string_validator_1 = require('./string-validator');
var number_validator_1 = require('./number-validator');
var date_validator_1 = require('./date-validator');
var object_validator_1 = require('./object-validator');
var schema_validator_1 = require('./schema-validator');
var boolean_validator_1 = require('./boolean-validator');
var schema_1 = require('../schema');
var cleaned_1 = require('../cleaned');
var RootValidator = (function () {
    function RootValidator() {
    }
    RootValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {};
        if (!definition.optional) {
            validators.required = cleaned_1.cleaned(RootValidator.RULES.required, key, definition, options);
        }
        if (definition.allowedValues) {
            validators.allowedValues = cleaned_1.cleaned(RootValidator.RULES.allowedValues, key, definition, options);
        }
        if (definition.array) {
            validators.isArray = cleaned_1.cleaned(RootValidator.RULES.isArray, key, definition, options);
        }
        if (definition.minCount) {
            validators.minCount = cleaned_1.cleaned(RootValidator.RULES.minCount, key, definition, options);
        }
        if (definition.maxCount) {
            validators.maxCount = cleaned_1.cleaned(RootValidator.RULES.maxCount, key, definition, options);
        }
        if (definition.custom) {
            if (typeof definition.custom === 'function') {
                validators.custom = cleaned_1.cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom, 'custom');
            }
            else if (typeof definition.custom === 'object') {
                for (var rule in definition.custom) {
                    if (definition.custom.hasOwnProperty(rule)) {
                        validators[rule] = cleaned_1.cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom[rule], rule);
                    }
                }
            }
        }
        switch (definition.type) {
            case Boolean:
                _.assign(validators, boolean_validator_1.BooleanValidator.getValidatorsForKey(key, definition, options, object));
                break;
            case Date:
                _.assign(validators, date_validator_1.DateValidator.getValidatorsForKey(key, definition, options, object));
                break;
            case Number:
                _.assign(validators, number_validator_1.NumberValidator.getValidatorsForKey(key, definition, options, object));
                break;
            case Object:
                _.assign(validators, object_validator_1.ObjectValidator.getValidatorsForKey(key, definition, options, object));
                break;
            case String:
                _.assign(validators, string_validator_1.StringValidator.getValidatorsForKey(key, definition, options, object));
                break;
            default:
                if (definition.type instanceof schema_1.Schema) {
                    _.assign(validators, schema_validator_1.SchemaValidator.getValidatorsForKey(key, definition, options, object));
                }
                else {
                    throw new Error("Unkown type " + definition.type + " used in schema");
                }
        }
        return validators;
    };
    RootValidator.getValidator = function (type) {
        switch (type) {
            case String:
                return string_validator_1.StringValidator;
            case Number:
                return number_validator_1.NumberValidator;
            case Date:
                return date_validator_1.DateValidator;
            case Object:
                return object_validator_1.ObjectValidator;
            case Boolean:
                return boolean_validator_1.BooleanValidator;
            default:
                if (type instanceof schema_1.Schema) {
                    return schema_validator_1.SchemaValidator;
                }
                else {
                    throw new Error("Unkown type " + type + " used in schema");
                }
        }
    };
    RootValidator.prototype.getValidator = function (type) {
        switch (type) {
            case String:
                return new string_validator_1.StringValidator();
            case Number:
                return new number_validator_1.NumberValidator();
            case Date:
                return new date_validator_1.DateValidator();
            case Object:
                return new object_validator_1.ObjectValidator();
            case Boolean:
                return new boolean_validator_1.BooleanValidator();
            default:
                if (type instanceof schema_1.Schema) {
                    return new schema_validator_1.SchemaValidator();
                }
                else {
                    throw new Error("Unkown type " + type + " used in schema");
                }
        }
    };
    RootValidator.prototype.validateType = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var type = definition.type;
        var rules = RootValidator.RULES;
        var validator = this.getValidator(type);
        if (definition.array) {
            result.and(rules.isArray(value, key, definition));
            if (result.isValid()) {
                result.and(rules.minCount(value, key, definition));
                result.and(rules.maxCount(value, key, definition));
                // use classic for loop here because we need the index
                for (var index = 0; index < value.length; index++) {
                    result.and(validator.validate(key + "." + index, definition, value[index], options));
                }
            }
        }
        else {
            result.and(validator.validate(key, definition, value, options));
        }
        return result;
    };
    RootValidator.prototype.validate = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var rules = RootValidator.RULES;
        result.and(rules.required(value, key, definition));
        if (!result.isValid() || (typeof value === 'undefined' || value == null)) {
            return result;
        }
        result.and(rules.allowedValues(value, key, definition));
        if (!result.isValid()) {
            return result;
        }
        var types = Array.isArray(definition.type) ? definition.type : [definition.type];
        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var type = types_1[_i];
            var singleDefinition = { type: type };
            _.defaults(singleDefinition, definition);
            result.or(this.validateType(key, singleDefinition, value, options));
            if (result.isValid()) {
                break;
            }
        }
        return result;
    };
    RootValidator.prototype.clean = function (definition, value, options, object) {
        var result = value;
        if (options.removeEmptyStrings && typeof result === 'string' && value.trim().length === 0) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        else if (options.removeEmptyObjects && typeof result === 'object' && _.isEmpty(result) && !_.isDate(result)) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        var types = Array.isArray(definition.type) ? definition.type : [definition.type];
        if (typeof result === 'undefined' || result == null) {
            if (typeof definition.defaultValue !== 'undefined') {
                result = _.cloneDeep(definition.defaultValue);
            }
        }
        if (options.getAutoValues && typeof definition.autoValue === 'function') {
            result = definition.autoValue(result, object);
        }
        for (var _i = 0, _a = _.reverse(types); _i < _a.length; _i++) {
            var type = _a[_i];
            result = this.getValidator(type).clean(definition, result, options, object);
        }
        return result;
    };
    RootValidator.RULES = {
        isArray: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && !Array.isArray(value)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name
                };
            }
            return null;
        },
        minCount: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.minCount === 'number') && value.length < definition.minCount) {
                return {
                    property: key,
                    rule: 'minCount',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at least " + definition.minCount + " elements"
                };
            }
            return null;
        },
        maxCount: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.maxCount === 'number') && value.length > definition.maxCount) {
                return {
                    property: key,
                    rule: 'maxCount',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at max " + definition.maxCount + " elements"
                };
            }
            return null;
        },
        required: function (value, key, definition) {
            if (!definition.optional && (typeof value === 'undefined' || value == null)) {
                return {
                    property: key,
                    rule: 'required',
                    message: "Missing value for property " + key
                };
            }
            return null;
        },
        allowedValues: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && typeof definition.allowedValues !== 'undefined') {
                if (!(value in definition.allowedValues)) {
                    return {
                        property: key,
                        rule: 'allowedValues',
                        message: "Value of " + key + " is not in allowedValues"
                    };
                }
            }
            return null;
        },
        custom: function (value, key, defintion, object, options, custom, rule) {
            var error = custom(value, object, options.context);
            if (typeof error === 'string') {
                return {
                    property: key,
                    rule: rule,
                    message: error
                };
            }
            return null;
        }
    };
    return RootValidator;
}());
exports.RootValidator = RootValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
