"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var string_validator_1 = require('./string-validator');
var number_validator_1 = require('./number-validator');
var date_validator_1 = require('./date-validator');
var object_validator_1 = require('./object-validator');
var schema_validator_1 = require('./schema-validator');
var boolean_validator_1 = require('./boolean-validator');
var schema_1 = require('../schema');
var cleaned_1 = require('../cleaned');
var RootValidator = (function () {
    function RootValidator() {
    }
    // for the type rule, the value is valid if at least one type is valid
    RootValidator.createTypeValidator = function (key, types, validatorsByType) {
        return function (value, object, options) {
            for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
                var type = types_1[_i];
                var validator = validatorsByType[type.name].type;
                if (validator(value, object, options) === null) {
                    return null;
                }
            }
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be one of [" + Object.keys(validatorsByType).join(', ') + "]"
            };
        };
    };
    // every other rule gets passed down to every typeValidator that supports the rule
    RootValidator.createRuleValidator = function (rule, types, validatorsByType) {
        return function (value, object, options) {
            for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                var type = types_2[_i];
                var validator = validatorsByType[type.name][rule];
                if (typeof validator === 'function') {
                    return validator(value, object, options);
                }
            }
            return null;
        };
    };
    RootValidator.createArrayValidator = function (validator, key) {
        return function (value, object, options) {
            if (_.isArray(value)) {
                var result = new composed_validation_result_1.ComposedValidationResult();
                for (var index = 0; index < value.length; index++) {
                    result.and(validator(value[index], object, options), null, index);
                }
                return result;
            }
            return null;
        };
    };
    RootValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {};
        if (!definition.optional) {
            validators.required = cleaned_1.cleaned(RootValidator.RULES.required, key, definition, options);
        }
        if (definition.allowedValues) {
            validators.allowedValues = cleaned_1.cleaned(RootValidator.RULES.allowedValues, key, definition, options);
        }
        if (definition.array) {
            validators.isArray = cleaned_1.cleaned(RootValidator.RULES.isArray, key, definition, options);
        }
        if (typeof definition.minCount !== 'undefined') {
            validators.minCount = cleaned_1.cleaned(RootValidator.RULES.minCount, key, definition, options);
        }
        if (typeof definition.maxCount !== 'undefined') {
            validators.maxCount = cleaned_1.cleaned(RootValidator.RULES.maxCount, key, definition, options);
        }
        if (definition.custom) {
            if (typeof definition.custom === 'function') {
                validators.custom = cleaned_1.cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom, 'custom');
            }
            else if (typeof definition.custom === 'object') {
                for (var rule in definition.custom) {
                    if (definition.custom.hasOwnProperty(rule)) {
                        validators[rule] = cleaned_1.cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom[rule], rule);
                    }
                }
            }
        }
        var types = _.isArray(definition.type) ? definition.type : [definition.type];
        var validatorsByType = {};
        var rules = [];
        for (var _i = 0, types_3 = types; _i < types_3.length; _i++) {
            var type = types_3[_i];
            var validators_1 = this.getValidator(type).getValidatorsForKey(key, definition, options, object);
            validatorsByType[type.name] = validators_1;
            rules = _.union(rules, Object.keys(validators_1));
        }
        if (definition.array) {
            for (var _a = 0, rules_1 = rules; _a < rules_1.length; _a++) {
                var rule = rules_1[_a];
                validators[rule] = rule === 'type' ?
                    RootValidator.createArrayValidator(RootValidator.createTypeValidator(key, types, validatorsByType), key) :
                    RootValidator.createArrayValidator(RootValidator.createRuleValidator(rule, types, validatorsByType), key);
            }
        }
        else {
            for (var _b = 0, rules_2 = rules; _b < rules_2.length; _b++) {
                var rule = rules_2[_b];
                validators[rule] = rule === 'type' ?
                    RootValidator.createTypeValidator(key, types, validatorsByType) :
                    RootValidator.createRuleValidator(rule, types, validatorsByType);
            }
        }
        return validators;
    };
    RootValidator.getValidator = function (type) {
        switch (type) {
            case String:
                return string_validator_1.StringValidator;
            case Number:
                return number_validator_1.NumberValidator;
            case Date:
                return date_validator_1.DateValidator;
            case Object:
                return object_validator_1.ObjectValidator;
            case Boolean:
                return boolean_validator_1.BooleanValidator;
            default:
                if (type instanceof schema_1.Schema) {
                    return schema_validator_1.SchemaValidator;
                }
                else {
                    throw new Error("Unkown type " + type + " used in schema");
                }
        }
    };
    RootValidator.clean = function (definition, value, options, object) {
        var result = value;
        if (options.removeEmptyStrings && typeof result === 'string' && value.trim().length === 0) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        else if (options.removeEmptyObjects && typeof result === 'object' && _.isEmpty(result) && !_.isDate(result)) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        var types = Array.isArray(definition.type) ? definition.type : [definition.type];
        if (typeof result === 'undefined' || result == null) {
            if (typeof definition.defaultValue !== 'undefined') {
                result = _.cloneDeep(definition.defaultValue);
            }
        }
        if (options.getAutoValues && typeof definition.autoValue === 'function') {
            result = definition.autoValue(result, object);
        }
        for (var _i = 0, _a = _.reverse(types); _i < _a.length; _i++) {
            var type = _a[_i];
            result = RootValidator.getValidator(type).clean(definition, result, options, object);
        }
        return result;
    };
    RootValidator.RULES = {
        isArray: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && !Array.isArray(value)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name
                };
            }
            return null;
        },
        minCount: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.minCount === 'number') && value.length < definition.minCount) {
                return {
                    property: key,
                    rule: 'minCount',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at least " + definition.minCount + " elements"
                };
            }
            return null;
        },
        maxCount: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.maxCount === 'number') && value.length > definition.maxCount) {
                return {
                    property: key,
                    rule: 'maxCount',
                    message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at max " + definition.maxCount + " elements"
                };
            }
            return null;
        },
        required: function (value, key, definition) {
            if (!definition.optional && (typeof value === 'undefined' || value == null)) {
                return {
                    property: key,
                    rule: 'required',
                    message: "Missing value for property " + key
                };
            }
            return null;
        },
        allowedValues: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && typeof definition.allowedValues !== 'undefined') {
                if (!(value in definition.allowedValues)) {
                    return {
                        property: key,
                        rule: 'allowedValues',
                        message: "Value of " + key + " is not in allowedValues"
                    };
                }
            }
            return null;
        },
        custom: function (value, key, defintion, object, options, custom, rule) {
            var error = custom(value, object, options.context);
            if (typeof error === 'string') {
                return {
                    property: key,
                    rule: rule,
                    message: error
                };
            }
            return null;
        }
    };
    return RootValidator;
}());
exports.RootValidator = RootValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
