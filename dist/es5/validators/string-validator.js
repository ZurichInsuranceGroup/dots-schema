"use strict";
var moment = require('moment');
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var cleaned_1 = require('../cleaned');
var StringValidator = (function () {
    function StringValidator() {
    }
    StringValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned_1.cleaned(StringValidator.RULES.type, key, definition, options)
        };
        if (definition.min) {
            _.assign(validators, cleaned_1.cleaned(StringValidator.RULES.min, key, definition, options));
        }
        if (definition.max) {
            _.assign(validators, cleaned_1.cleaned(StringValidator.RULES.max, key, definition, options));
        }
        if (definition.regEx) {
            _.assign(validators, cleaned_1.cleaned(StringValidator.RULES.regEx, key, definition, options));
        }
        return validators;
    };
    StringValidator.prototype.validate = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var rules = StringValidator.RULES;
        result.and(rules.type(value, key, definition));
        if (result.isValid()) {
            result.and(rules.min(value, key, definition));
            result.and(rules.max(value, key, definition));
            result.and(rules.regEx(value, key, definition));
        }
        return result;
    };
    StringValidator.prototype.clean = function (definition, value, options, object) {
        if (!options.autoConvert) {
            return value;
        }
        if (typeof value !== 'string') {
            if (typeof value === 'number' || typeof value === 'boolean') {
                return value.toString();
            }
            else if (value instanceof Date) {
                if (typeof definition.dateFormat === 'string') {
                    return moment(value).format(definition.dateFormat);
                }
                else {
                    return moment(value).format();
                }
            }
        }
        if (typeof value === 'string') {
            if (options.trimStrings || definition.trim) {
                if (definition.trim !== false) {
                    value = value.trim();
                }
            }
            if (value.trim().length === 0 && (definition.removeEmpty || options.removeEmptyStrings)) {
                if (definition.removeEmpty !== false) {
                    value = null;
                }
            }
        }
        return value;
    };
    StringValidator.RULES = {
        type: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'string') {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be of type String"
                };
            }
            return null;
        },
        min: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.min === 'number') && value.length < definition.min) {
                return {
                    property: key,
                    rule: 'min',
                    message: "Property " + key + " must be shorter than " + definition.min
                };
            }
            return null;
        },
        max: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (typeof definition.max === 'number') && value.length > definition.max) {
                return {
                    property: key,
                    rule: 'max',
                    message: "Property " + key + " must be longer than " + definition.max
                };
            }
            return null;
        },
        regEx: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (definition.regEx instanceof RegExp) && !definition.regEx.test(value)) {
                return {
                    property: key,
                    rule: 'regEx',
                    message: "Property " + key + " must match " + definition.regEx.toString()
                };
            }
            return null;
        }
    };
    return StringValidator;
}());
exports.StringValidator = StringValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
