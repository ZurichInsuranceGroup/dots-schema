"use strict";
var moment = require('moment');
var cleaned_1 = require('../cleaned');
var DateValidator = (function () {
    function DateValidator() {
    }
    DateValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned_1.cleaned(DateValidator.RULES.type, key, definition, options)
        };
        if (definition.before) {
            validators.before = cleaned_1.cleaned(DateValidator.RULES.before, key, definition, options);
        }
        if (definition.after) {
            validators.after = cleaned_1.cleaned(DateValidator.RULES.after, key, definition, options);
        }
        return validators;
    };
    DateValidator.clean = function (definition, value, options, object) {
        if (!options.autoConvert) {
            return value;
        }
        if (typeof value === 'string') {
            if (typeof definition.dateFormat === 'string') {
                return moment(value, definition.dateFormat).toDate();
            }
            else {
                return moment(value).toDate();
            }
        }
        return value;
    };
    DateValidator.RULES = {
        type: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && !(value instanceof Date)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be of type Date"
                };
            }
            return null;
        },
        before: function (value, key, definition) {
            if (value instanceof Date && (definition.before instanceof Date) && !moment(value).isBefore(definition.before)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be a date before " + definition.before
                };
            }
            return null;
        },
        after: function (value, key, definition) {
            if (value instanceof Date && (definition.after instanceof Date) && !moment(value).isAfter(definition.after)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be a date after " + definition.after
                };
            }
            return null;
        }
    };
    return DateValidator;
}());
exports.DateValidator = DateValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMvZGF0ZS12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVksTUFBTSxXQUFNLFFBQ3hCLENBQUMsQ0FEK0I7QUFVaEMsd0JBQXdCLFlBRXhCLENBQUMsQ0FGbUM7QUFFcEM7SUFBQTtJQWdFQSxDQUFDO0lBN0JpQixpQ0FBbUIsR0FBakMsVUFBa0MsR0FBVyxFQUFFLFVBQWdDLEVBQUUsT0FBMEIsRUFBRSxNQUFZO1FBQ3JILElBQU0sVUFBVSxHQUFRO1lBQ3BCLElBQUksRUFBRSxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1NBQ3BFLENBQUE7UUFFRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwQixVQUFVLENBQUMsTUFBTSxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNyRixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkIsVUFBVSxDQUFDLEtBQUssR0FBRyxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDbkYsQ0FBQztRQUVELE1BQU0sQ0FBQyxVQUFVLENBQUE7SUFDckIsQ0FBQztJQUVhLG1CQUFLLEdBQW5CLFVBQW9CLFVBQWdDLEVBQUUsS0FBVSxFQUFFLE9BQXFCLEVBQUUsTUFBVztRQUNoRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDaEIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLENBQUMsT0FBTyxVQUFVLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUN4RCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUNqQyxDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQTdEYyxtQkFBSyxHQUFHO1FBQ25CLElBQUksRUFBRSxVQUFDLEtBQVUsRUFBRSxHQUFXLEVBQUUsVUFBZ0M7WUFDNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxXQUFXLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvRSxNQUFNLENBQUM7b0JBQ0gsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLE1BQU07b0JBQ1osT0FBTyxFQUFFLGNBQVksR0FBRywwQkFBdUI7aUJBQ2xELENBQUE7WUFDTCxDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDRCxNQUFNLEVBQUUsVUFBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLFVBQWdDO1lBQzlELEVBQUUsQ0FBQyxDQUFDLEtBQUssWUFBWSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3RyxNQUFNLENBQUM7b0JBQ0gsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLE1BQU07b0JBQ1osT0FBTyxFQUFFLGNBQVksR0FBRywrQkFBMEIsVUFBVSxDQUFDLE1BQVE7aUJBQ3hFLENBQUE7WUFDTCxDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLFVBQWdDO1lBQzdELEVBQUUsQ0FBQyxDQUFDLEtBQUssWUFBWSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxRyxNQUFNLENBQUM7b0JBQ0gsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLE1BQU07b0JBQ1osT0FBTyxFQUFFLGNBQVksR0FBRyw4QkFBeUIsVUFBVSxDQUFDLEtBQU87aUJBQ3RFLENBQUE7WUFDTCxDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUNmLENBQUM7S0FDSixDQUFBO0lBK0JMLG9CQUFDO0FBQUQsQ0FoRUEsQUFnRUMsSUFBQTtBQWhFWSxxQkFBYSxnQkFnRXpCLENBQUEiLCJmaWxlIjoidmFsaWRhdG9ycy9kYXRlLXZhbGlkYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCdcblxuaW1wb3J0IHtcbiAgICBWYWxpZGF0aW9uRGVmaW5pdGlvbixcbiAgICBWYWxpZGF0aW9uUmVzdWx0LFxuICAgIFZhbGlkYXRpb25PcHRpb25zLFxuICAgIENsZWFuT3B0aW9uc1xufSAgZnJvbSAnLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IENvbXBvc2VkVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4uL2NvbXBvc2VkLXZhbGlkYXRpb24tcmVzdWx0J1xuaW1wb3J0IHsgY2xlYW5lZCB9IGZyb20gJy4uL2NsZWFuZWQnXG5cbmV4cG9ydCBjbGFzcyBEYXRlVmFsaWRhdG9yIHtcblxuICAgICBwdWJsaWMgc3RhdGljIFJVTEVTID0ge1xuICAgICAgICB0eXBlOiAodmFsdWU6IGFueSwga2V5OiBzdHJpbmcsIGRlZmluaXRpb246IFZhbGlkYXRpb25EZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09IG51bGwpICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHJ1bGU6ICd0eXBlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFByb3BlcnR5ICR7a2V5fSBtdXN0IGJlIG9mIHR5cGUgRGF0ZWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBiZWZvcmU6ICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZywgZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24pID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgKGRlZmluaXRpb24uYmVmb3JlIGluc3RhbmNlb2YgRGF0ZSkgJiYgIW1vbWVudCh2YWx1ZSkuaXNCZWZvcmUoZGVmaW5pdGlvbi5iZWZvcmUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZTogJ3R5cGUnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgUHJvcGVydHkgJHtrZXl9IG11c3QgYmUgYSBkYXRlIGJlZm9yZSAke2RlZmluaXRpb24uYmVmb3JlfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBhZnRlcjogKHZhbHVlOiBhbnksIGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAoZGVmaW5pdGlvbi5hZnRlciBpbnN0YW5jZW9mIERhdGUpICYmICFtb21lbnQodmFsdWUpLmlzQWZ0ZXIoZGVmaW5pdGlvbi5hZnRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICAgICAgICAgICAgICBydWxlOiAndHlwZScsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBQcm9wZXJ0eSAke2tleX0gbXVzdCBiZSBhIGRhdGUgYWZ0ZXIgJHtkZWZpbml0aW9uLmFmdGVyfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRWYWxpZGF0b3JzRm9yS2V5KGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbiwgb3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMsIG9iamVjdD86IGFueSkge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3JzOiBhbnkgPSB7XG4gICAgICAgICAgICB0eXBlOiBjbGVhbmVkKERhdGVWYWxpZGF0b3IuUlVMRVMudHlwZSwga2V5LCBkZWZpbml0aW9uLCBvcHRpb25zKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb24uYmVmb3JlKSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JzLmJlZm9yZSA9IGNsZWFuZWQoRGF0ZVZhbGlkYXRvci5SVUxFUy5iZWZvcmUsIGtleSwgZGVmaW5pdGlvbiwgb3B0aW9ucylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZpbml0aW9uLmFmdGVyKSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JzLmFmdGVyID0gY2xlYW5lZChEYXRlVmFsaWRhdG9yLlJVTEVTLmFmdGVyLCBrZXksIGRlZmluaXRpb24sIG9wdGlvbnMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsaWRhdG9yc1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY2xlYW4oZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24sIHZhbHVlOiBhbnksIG9wdGlvbnM6IENsZWFuT3B0aW9ucywgb2JqZWN0OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAoIW9wdGlvbnMuYXV0b0NvbnZlcnQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZmluaXRpb24uZGF0ZUZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KHZhbHVlLCBkZWZpbml0aW9uLmRhdGVGb3JtYXQpLnRvRGF0ZSgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQodmFsdWUpLnRvRGF0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxufVxuIl19
