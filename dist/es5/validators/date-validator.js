"use strict";
var moment = require('moment');
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var cleaned_1 = require('../cleaned');
var DateValidator = (function () {
    function DateValidator() {
    }
    DateValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned_1.cleaned(DateValidator.RULES.type, key, definition, options)
        };
        if (definition.before) {
            _.assign(validators, cleaned_1.cleaned(DateValidator.RULES.before, key, definition, options));
        }
        if (definition.after) {
            _.assign(validators, cleaned_1.cleaned(DateValidator.RULES.after, key, definition, options));
        }
        return validators;
    };
    DateValidator.prototype.validate = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var rules = DateValidator.RULES;
        result.and(rules.type(value, key, definition));
        if (result.isValid()) {
            result.and(rules.before(value, key, definition));
            result.and(rules.after(value, key, definition));
        }
        return result;
    };
    DateValidator.prototype.clean = function (definition, value, options, object) {
        if (!options.autoConvert) {
            return value;
        }
        if (typeof value === 'string') {
            if (typeof definition.dateFormat === 'string') {
                return moment(value, definition.dateFormat).toDate();
            }
            else {
                return moment(value).toDate();
            }
        }
        return value;
    };
    DateValidator.RULES = {
        type: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && !(value instanceof Date)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be of type Date"
                };
            }
            return null;
        },
        before: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (definition.before instanceof Date) && !moment(value).isBefore(definition.before)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be a date before " + definition.before
                };
            }
            return null;
        },
        after: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (definition.after instanceof Date) && !moment(value).isAfter(definition.after)) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be a date after " + definition.after
                };
            }
            return null;
        }
    };
    return DateValidator;
}());
exports.DateValidator = DateValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
