"use strict";
var _ = require('lodash');
var composed_validation_result_1 = require('../composed-validation-result');
var cleaned_1 = require('../cleaned');
var SchemaValidator = (function () {
    function SchemaValidator() {
    }
    SchemaValidator.getValidatorsForKey = function (key, definition, options, object) {
        return {
            type: cleaned_1.cleaned(SchemaValidator.RULES.type, key, definition, options),
            schema: cleaned_1.cleaned(SchemaValidator.RULES.schema, key, definition, options)
        };
    };
    SchemaValidator.prototype.validate = function (key, definition, value, options) {
        var result = new composed_validation_result_1.ComposedValidationResult();
        var rules = SchemaValidator.RULES;
        result.and(rules.type(value, key, definition));
        if (result.isValid()) {
            result.and(rules.schema(value, key, definition, options), key);
        }
        return result;
    };
    SchemaValidator.prototype.clean = function (definition, value, options, object) {
        var schema = definition.type;
        return schema.clean(value, options);
    };
    SchemaValidator.RULES = {
        type: function (value, key, definition) {
            if ((typeof value !== 'undefined' && value !== null) && (!(_.isObject(value) || _.isArray(value)))) {
                return {
                    property: key,
                    rule: 'type',
                    message: "Property " + key + " must be an Object or an Array of Objects"
                };
            }
            return null;
        },
        schema: function (value, key, definition, options) {
            var schema = definition.type;
            return schema.validate(value, options);
        }
    };
    return SchemaValidator;
}());
exports.SchemaValidator = SchemaValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMvc2NoZW1hLXZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxDQUFDLFdBQU0sUUFFbkIsQ0FBQyxDQUYwQjtBQVMzQiwyQ0FBeUMsK0JBQ3pDLENBQUMsQ0FEdUU7QUFFeEUsd0JBQXdCLFlBRXhCLENBQUMsQ0FGbUM7QUFFcEM7SUFBQTtJQTZDQSxDQUFDO0lBekJpQixtQ0FBbUIsR0FBakMsVUFBa0MsR0FBVyxFQUFFLFVBQWdDLEVBQUUsT0FBMEIsRUFBRSxNQUFZO1FBQ3JILE1BQU0sQ0FBQztZQUNILElBQUksRUFBRSxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1lBQ25FLE1BQU0sRUFBRSxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1NBQzFFLENBQUE7SUFDTCxDQUFDO0lBRUQsa0NBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxVQUFnQyxFQUFFLEtBQVUsRUFBRSxPQUEwQjtRQUMxRixJQUFNLE1BQU0sR0FBRyxJQUFJLHFEQUF3QixFQUFFLENBQUE7UUFDN0MsSUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQTtRQUVuQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBRTlDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ2xFLENBQUM7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2pCLENBQUM7SUFFRCwrQkFBSyxHQUFMLFVBQU0sVUFBZ0MsRUFBRSxLQUFVLEVBQUUsT0FBcUIsRUFBRSxNQUFXO1FBQ2xGLElBQU0sTUFBTSxHQUFXLFVBQVUsQ0FBQyxJQUFjLENBQUE7UUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUF6Q2EscUJBQUssR0FBRztRQUNsQixJQUFJLEVBQUUsVUFBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLFVBQWdDO1lBQzVELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakcsTUFBTSxDQUFDO29CQUNILFFBQVEsRUFBRSxHQUFHO29CQUNiLElBQUksRUFBRSxNQUFNO29CQUNaLE9BQU8sRUFBRSxjQUFZLEdBQUcsOENBQTJDO2lCQUN0RSxDQUFBO1lBQ0wsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsTUFBTSxFQUFFLFVBQUMsS0FBVSxFQUFFLEdBQVcsRUFBRSxVQUFnQyxFQUFFLE9BQTBCO1lBQzFGLElBQU0sTUFBTSxHQUFXLFVBQVUsQ0FBQyxJQUFjLENBQUE7WUFFaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzFDLENBQUM7S0FDSixDQUFBO0lBMkJMLHNCQUFDO0FBQUQsQ0E3Q0EsQUE2Q0MsSUFBQTtBQTdDWSx1QkFBZSxrQkE2QzNCLENBQUEiLCJmaWxlIjoidmFsaWRhdG9ycy9zY2hlbWEtdmFsaWRhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnXG5cbmltcG9ydCB7XG4gICAgVmFsaWRhdG9yLFxuICAgIFZhbGlkYXRpb25EZWZpbml0aW9uLFxuICAgIFZhbGlkYXRpb25SZXN1bHQsXG4gICAgVmFsaWRhdGlvbk9wdGlvbnMsXG4gICAgQ2xlYW5PcHRpb25zXG59ICBmcm9tICcuLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgQ29tcG9zZWRWYWxpZGF0aW9uUmVzdWx0IH0gZnJvbSAnLi4vY29tcG9zZWQtdmFsaWRhdGlvbi1yZXN1bHQnXG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuLi9zY2hlbWEnXG5pbXBvcnQgeyBjbGVhbmVkIH0gZnJvbSAnLi4vY2xlYW5lZCdcblxuZXhwb3J0IGNsYXNzIFNjaGVtYVZhbGlkYXRvciBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG5cbiAgICBwdWJsaWMgc3RhdGljIFJVTEVTID0ge1xuICAgICAgICB0eXBlOiAodmFsdWU6IGFueSwga2V5OiBzdHJpbmcsIGRlZmluaXRpb246IFZhbGlkYXRpb25EZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09IG51bGwpICYmICghKF8uaXNPYmplY3QodmFsdWUpIHx8IF8uaXNBcnJheSh2YWx1ZSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHJ1bGU6ICd0eXBlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFByb3BlcnR5ICR7a2V5fSBtdXN0IGJlIGFuIE9iamVjdCBvciBhbiBBcnJheSBvZiBPYmplY3RzYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHNjaGVtYTogKHZhbHVlOiBhbnksIGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbiwgb3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYTogU2NoZW1hID0gZGVmaW5pdGlvbi50eXBlIGFzIFNjaGVtYVxuXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLnZhbGlkYXRlKHZhbHVlLCBvcHRpb25zKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRWYWxpZGF0b3JzRm9yS2V5KGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbiwgb3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMsIG9iamVjdD86IGFueSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogY2xlYW5lZChTY2hlbWFWYWxpZGF0b3IuUlVMRVMudHlwZSwga2V5LCBkZWZpbml0aW9uLCBvcHRpb25zKSxcbiAgICAgICAgICAgIHNjaGVtYTogY2xlYW5lZChTY2hlbWFWYWxpZGF0b3IuUlVMRVMuc2NoZW1hLCBrZXksIGRlZmluaXRpb24sIG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0ZShrZXk6IHN0cmluZywgZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24sIHZhbHVlOiBhbnksIG9wdGlvbnM6IFZhbGlkYXRpb25PcHRpb25zKTogVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBDb21wb3NlZFZhbGlkYXRpb25SZXN1bHQoKVxuICAgICAgICBjb25zdCBydWxlcyA9IFNjaGVtYVZhbGlkYXRvci5SVUxFU1xuXG4gICAgICAgIHJlc3VsdC5hbmQocnVsZXMudHlwZSh2YWx1ZSwga2V5LCBkZWZpbml0aW9uKSlcblxuICAgICAgICBpZiAocmVzdWx0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmVzdWx0LmFuZChydWxlcy5zY2hlbWEodmFsdWUsIGtleSwgZGVmaW5pdGlvbiwgb3B0aW9ucyksIGtleSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICBjbGVhbihkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbiwgdmFsdWU6IGFueSwgb3B0aW9uczogQ2xlYW5PcHRpb25zLCBvYmplY3Q6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYTogU2NoZW1hID0gZGVmaW5pdGlvbi50eXBlIGFzIFNjaGVtYVxuICAgICAgICByZXR1cm4gc2NoZW1hLmNsZWFuKHZhbHVlLCBvcHRpb25zKVxuICAgIH1cblxufVxuIl19
