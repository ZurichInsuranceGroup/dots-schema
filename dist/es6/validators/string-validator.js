import moment from 'moment';
import { cleaned } from '../cleaned';
import { min, max } from './common-rules';
var StringValidator = (function () {
    function StringValidator() {
    }
    StringValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned(StringValidator.RULES.type, key, definition, options)
        };
        if (typeof definition.min !== 'undefined') {
            validators.min = cleaned(StringValidator.RULES.min, key, definition, options);
        }
        if (typeof definition.max !== 'undefined') {
            validators.max = cleaned(StringValidator.RULES.max, key, definition, options);
        }
        if (definition.regEx) {
            validators.regEx = cleaned(StringValidator.RULES.regEx, key, definition, options);
        }
        return validators;
    };
    StringValidator.clean = function (definition, value, options, object) {
        if (options.castTypes && typeof value !== 'string') {
            if (typeof value === 'number' || typeof value === 'boolean') {
                return value.toString();
            }
            else if (value instanceof Date) {
                if (typeof definition.dateFormat === 'string') {
                    return moment(value).format(definition.dateFormat);
                }
                else {
                    return moment(value).format();
                }
            }
        }
        if (typeof value === 'string') {
            if (options.trimStrings || definition.trim) {
                if (definition.trim !== false) {
                    value = value.trim();
                }
            }
            if (value.trim().length === 0 && (definition.removeEmpty || options.removeEmptyStrings)) {
                if (definition.removeEmpty !== false) {
                    value = null;
                }
            }
        }
        return value;
    };
    return StringValidator;
}());
export { StringValidator };
StringValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'string') {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type String"
            };
        }
        return null;
    },
    regEx: function (value, key, definition) {
        if (typeof value === 'string' && definition.regEx instanceof RegExp && !definition.regEx.test(value)) {
            return {
                property: key,
                rule: 'regEx',
                message: "Property " + key + " must match " + definition.regEx.toString()
            };
        }
        return null;
    },
    min: min,
    max: max
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
