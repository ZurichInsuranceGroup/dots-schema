import moment from 'moment';
import { cleaned } from '../cleaned';
var DateValidator = (function () {
    function DateValidator() {
    }
    DateValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned(DateValidator.RULES.type, key, definition, options)
        };
        if (definition.before) {
            validators.before = cleaned(DateValidator.RULES.before, key, definition, options);
        }
        if (definition.after) {
            validators.after = cleaned(DateValidator.RULES.after, key, definition, options);
        }
        return validators;
    };
    DateValidator.clean = function (definition, value, options, object) {
        if (!options.castTypes) {
            return value;
        }
        if (typeof value === 'string') {
            if (typeof definition.dateFormat === 'string') {
                return moment(value, definition.dateFormat).toDate();
            }
            else {
                return moment(value).toDate();
            }
        }
        return value;
    };
    return DateValidator;
}());
export { DateValidator };
DateValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && !(value instanceof Date)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type Date"
            };
        }
        return null;
    },
    before: function (value, key, definition) {
        if (value instanceof Date && (definition.before instanceof Date) && !moment(value).isBefore(definition.before)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be a date before " + definition.before
            };
        }
        return null;
    },
    after: function (value, key, definition) {
        if (value instanceof Date && (definition.after instanceof Date) && !moment(value).isAfter(definition.after)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be a date after " + definition.after
            };
        }
        return null;
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kb3RzLXNjaGVtYS92YWxpZGF0b3JzL2RhdGUtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQTtBQVEzQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRXBDO0lBQUE7SUFnRUEsQ0FBQztJQTdCaUIsaUNBQW1CLEdBQWpDLFVBQWtDLEdBQVcsRUFBRSxVQUFnQyxFQUFFLE9BQTBCLEVBQUUsTUFBWTtRQUNySCxJQUFNLFVBQVUsR0FBUTtZQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1NBQ3BFLENBQUE7UUFFRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwQixVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3JGLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNuQixVQUFVLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ25GLENBQUM7UUFFRCxNQUFNLENBQUMsVUFBVSxDQUFBO0lBQ3JCLENBQUM7SUFFYSxtQkFBSyxHQUFuQixVQUFvQixVQUFnQyxFQUFFLEtBQVUsRUFBRSxPQUEwQixFQUFFLE1BQVc7UUFDckcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ2hCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzVCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sVUFBVSxDQUFDLFVBQVUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDeEQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDakMsQ0FBQztRQUNMLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2hCLENBQUM7SUFDTCxvQkFBQztBQUFELENBaEVBLEFBZ0VDOztBQTlEa0IsbUJBQUssR0FBRztJQUNuQixJQUFJLEVBQUUsVUFBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLFVBQWdDO1FBQzVELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRSxNQUFNLENBQUM7Z0JBQ0gsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLE1BQU07Z0JBQ1osT0FBTyxFQUFFLGNBQVksR0FBRywwQkFBdUI7YUFDbEQsQ0FBQTtRQUNMLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUNELE1BQU0sRUFBRSxVQUFDLEtBQVUsRUFBRSxHQUFXLEVBQUUsVUFBZ0M7UUFDOUQsRUFBRSxDQUFDLENBQUMsS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0csTUFBTSxDQUFDO2dCQUNILFFBQVEsRUFBRSxHQUFHO2dCQUNiLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxjQUFZLEdBQUcsK0JBQTBCLFVBQVUsQ0FBQyxNQUFRO2FBQ3hFLENBQUE7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUNmLENBQUM7SUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLFVBQWdDO1FBQzdELEVBQUUsQ0FBQyxDQUFDLEtBQUssWUFBWSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFHLE1BQU0sQ0FBQztnQkFDSCxRQUFRLEVBQUUsR0FBRztnQkFDYixJQUFJLEVBQUUsTUFBTTtnQkFDWixPQUFPLEVBQUUsY0FBWSxHQUFHLDhCQUF5QixVQUFVLENBQUMsS0FBTzthQUN0RSxDQUFBO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDZixDQUFDO0NBQ0osQ0FBQSIsImZpbGUiOiJ2YWxpZGF0b3JzL2RhdGUtdmFsaWRhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5cbmltcG9ydCB7XG4gICAgVmFsaWRhdGlvbkRlZmluaXRpb24sXG4gICAgVmFsaWRhdGlvblJlc3VsdCxcbiAgICBWYWxpZGF0aW9uT3B0aW9uc1xufSAgZnJvbSAnLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IENvbXBvc2VkVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4uL2NvbXBvc2VkLXZhbGlkYXRpb24tcmVzdWx0J1xuaW1wb3J0IHsgY2xlYW5lZCB9IGZyb20gJy4uL2NsZWFuZWQnXG5cbmV4cG9ydCBjbGFzcyBEYXRlVmFsaWRhdG9yIHtcblxuICAgICBwdWJsaWMgc3RhdGljIFJVTEVTID0ge1xuICAgICAgICB0eXBlOiAodmFsdWU6IGFueSwga2V5OiBzdHJpbmcsIGRlZmluaXRpb246IFZhbGlkYXRpb25EZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09IG51bGwpICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHJ1bGU6ICd0eXBlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFByb3BlcnR5ICR7a2V5fSBtdXN0IGJlIG9mIHR5cGUgRGF0ZWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBiZWZvcmU6ICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZywgZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24pID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgKGRlZmluaXRpb24uYmVmb3JlIGluc3RhbmNlb2YgRGF0ZSkgJiYgIW1vbWVudCh2YWx1ZSkuaXNCZWZvcmUoZGVmaW5pdGlvbi5iZWZvcmUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZTogJ3R5cGUnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgUHJvcGVydHkgJHtrZXl9IG11c3QgYmUgYSBkYXRlIGJlZm9yZSAke2RlZmluaXRpb24uYmVmb3JlfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBhZnRlcjogKHZhbHVlOiBhbnksIGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAoZGVmaW5pdGlvbi5hZnRlciBpbnN0YW5jZW9mIERhdGUpICYmICFtb21lbnQodmFsdWUpLmlzQWZ0ZXIoZGVmaW5pdGlvbi5hZnRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICAgICAgICAgICAgICBydWxlOiAndHlwZScsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBQcm9wZXJ0eSAke2tleX0gbXVzdCBiZSBhIGRhdGUgYWZ0ZXIgJHtkZWZpbml0aW9uLmFmdGVyfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRWYWxpZGF0b3JzRm9yS2V5KGtleTogc3RyaW5nLCBkZWZpbml0aW9uOiBWYWxpZGF0aW9uRGVmaW5pdGlvbiwgb3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMsIG9iamVjdD86IGFueSkge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3JzOiBhbnkgPSB7XG4gICAgICAgICAgICB0eXBlOiBjbGVhbmVkKERhdGVWYWxpZGF0b3IuUlVMRVMudHlwZSwga2V5LCBkZWZpbml0aW9uLCBvcHRpb25zKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb24uYmVmb3JlKSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JzLmJlZm9yZSA9IGNsZWFuZWQoRGF0ZVZhbGlkYXRvci5SVUxFUy5iZWZvcmUsIGtleSwgZGVmaW5pdGlvbiwgb3B0aW9ucylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZpbml0aW9uLmFmdGVyKSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JzLmFmdGVyID0gY2xlYW5lZChEYXRlVmFsaWRhdG9yLlJVTEVTLmFmdGVyLCBrZXksIGRlZmluaXRpb24sIG9wdGlvbnMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsaWRhdG9yc1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY2xlYW4oZGVmaW5pdGlvbjogVmFsaWRhdGlvbkRlZmluaXRpb24sIHZhbHVlOiBhbnksIG9wdGlvbnM6IFZhbGlkYXRpb25PcHRpb25zLCBvYmplY3Q6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5jYXN0VHlwZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZmluaXRpb24uZGF0ZUZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KHZhbHVlLCBkZWZpbml0aW9uLmRhdGVGb3JtYXQpLnRvRGF0ZSgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQodmFsdWUpLnRvRGF0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxufVxuIl19
