(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash.defaults'), require('lodash.clonedeep'), require('lodash.assign'), require('lodash.isobject'), require('lodash.isarray'), require('lodash.union'), require('lodash.isempty'), require('lodash.isdate'), require('lodash.reverse'), require('moment'), require('lodash.partialright'), require('lodash.isnan'), require('lodash.tolower')) :
    typeof define === 'function' && define.amd ? define('index', ['exports', 'lodash.defaults', 'lodash.clonedeep', 'lodash.assign', 'lodash.isobject', 'lodash.isarray', 'lodash.union', 'lodash.isempty', 'lodash.isdate', 'lodash.reverse', 'moment', 'lodash.partialright', 'lodash.isnan', 'lodash.tolower'], factory) :
    (factory((global.index = global.index || {}),global.defaults,global.cloneDeep,global.assign,global.isObject,global.isArray,global.union,global.isEmpty,global.isDate,global.reverse,global.moment,global.partialRight,global.isNaN,global.toLower));
}(this, (function (exports,defaults,cloneDeep,assign,isObject,isArray,union,isEmpty,isDate,reverse,moment,partialRight,isNaN,toLower) { 'use strict';

defaults = 'default' in defaults ? defaults['default'] : defaults;
cloneDeep = 'default' in cloneDeep ? cloneDeep['default'] : cloneDeep;
assign = 'default' in assign ? assign['default'] : assign;
isObject = 'default' in isObject ? isObject['default'] : isObject;
isArray = 'default' in isArray ? isArray['default'] : isArray;
union = 'default' in union ? union['default'] : union;
isEmpty = 'default' in isEmpty ? isEmpty['default'] : isEmpty;
isDate = 'default' in isDate ? isDate['default'] : isDate;
reverse = 'default' in reverse ? reverse['default'] : reverse;
moment = 'default' in moment ? moment['default'] : moment;
partialRight = 'default' in partialRight ? partialRight['default'] : partialRight;
isNaN = 'default' in isNaN ? isNaN['default'] : isNaN;
toLower = 'default' in toLower ? toLower['default'] : toLower;

var ComposedValidationResult = (function () {
    function ComposedValidationResult() {
        this.errors = [];
    }
    ComposedValidationResult.prototype.and = function (result, key, index) {
        if (key === void 0) { key = null; }
        if (index === void 0) { index = null; }
        if (result != null) {
            var prefix = key ? key + "." : '';
            var suffix = index !== null ? "." + index : '';
            if (result instanceof ComposedValidationResult) {
                for (var _i = 0, _a = result.getErrors(); _i < _a.length; _i++) {
                    var error = _a[_i];
                    var property = "" + prefix + error.property + suffix;
                    this.errors.push({
                        property: property,
                        rule: error.rule,
                        message: error.message
                    });
                }
            }
            else if (typeof result === 'object') {
                var error = result;
                var property = "" + prefix + error.property + suffix;
                this.errors.push({
                    property: property,
                    rule: error.rule,
                    message: error.message
                });
            }
        }
    };
    ComposedValidationResult.prototype.isValid = function () {
        return this.errors.length === 0;
    };
    ComposedValidationResult.prototype.getErrors = function () {
        return this.errors;
    };
    return ComposedValidationResult;
}());

function cleaned(validator, key, definition, options, defaultObject, custom, rule) {
    var defaultOptions = options;
    return function (value, object, options) {
        options = assign({}, defaultOptions, options);
        object = typeof object !== 'undefined' ? object : defaultObject;
        if (options && options.autoClean) {
            value = RootValidator.clean(definition, value, options, object);
        }
        return validator(value, key, definition, object, options, custom, rule);
    };
}

function min(value, key, definition) {
    if (typeof value === 'number' && typeof definition.min === 'number' && value < definition.min) {
        return {
            property: key,
            rule: 'min',
            message: "Property " + key + " must be greater than " + definition.min
        };
    }
    else if (typeof value === 'string' && typeof definition.min === 'number' && value.length < definition.min) {
        return {
            property: key,
            rule: 'min',
            message: "Property " + key + " must be shorter than " + definition.min
        };
    }
    return null;
}
function max(value, key, definition) {
    if (typeof value === 'number' && typeof definition.max === 'number' && value > definition.max) {
        return {
            property: key,
            rule: 'max',
            message: "Property " + key + " must be greater than " + definition.max
        };
    }
    else if (typeof value === 'string' && typeof definition.max === 'number' && value.length > definition.max) {
        return {
            property: key,
            rule: 'max',
            message: "Property " + key + " must be longer than " + definition.max
        };
    }
    return null;
}

var StringValidator = (function () {
    function StringValidator() {
    }
    StringValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned(StringValidator.RULES.type, key, definition, options)
        };
        if (typeof definition.min !== 'undefined') {
            validators.min = cleaned(StringValidator.RULES.min, key, definition, options);
        }
        if (typeof definition.max !== 'undefined') {
            validators.max = cleaned(StringValidator.RULES.max, key, definition, options);
        }
        if (definition.regEx) {
            validators.regEx = cleaned(StringValidator.RULES.regEx, key, definition, options);
        }
        return validators;
    };
    StringValidator.clean = function (definition, value, options, object) {
        if (options.castTypes && typeof value !== 'string') {
            if (typeof value === 'number' || typeof value === 'boolean') {
                return value.toString();
            }
            else if (value instanceof Date) {
                if (typeof definition.dateFormat === 'string') {
                    return moment(value).format(definition.dateFormat);
                }
                else {
                    return moment(value).format();
                }
            }
        }
        if (typeof value === 'string') {
            if (options.trimStrings || definition.trim) {
                if (definition.trim !== false) {
                    value = value.trim();
                }
            }
            if (value.trim().length === 0 && (definition.removeEmpty || options.removeEmptyStrings)) {
                if (definition.removeEmpty !== false) {
                    value = null;
                }
            }
        }
        return value;
    };
    return StringValidator;
}());
StringValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'string') {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type String"
            };
        }
        return null;
    },
    regEx: function (value, key, definition) {
        if (typeof value === 'string' && definition.regEx instanceof RegExp && !definition.regEx.test(value)) {
            return {
                property: key,
                rule: 'regEx',
                message: "Property " + key + " must match " + definition.regEx.toString()
            };
        }
        return null;
    },
    min: min,
    max: max
};

var NumberValidator = (function () {
    function NumberValidator() {
    }
    NumberValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned(NumberValidator.RULES.type, key, definition, options)
        };
        if (typeof definition.min !== 'undefined') {
            validators.min = cleaned(NumberValidator.RULES.min, key, definition, options);
        }
        if (typeof definition.max !== 'undefined') {
            validators.max = cleaned(NumberValidator.RULES.max, key, definition, options);
        }
        return validators;
    };
    NumberValidator.clean = function (definition, value, options, object) {
        if (!options.castTypes) {
            return value;
        }
        if (typeof value === 'string') {
            var result = parseFloat(value);
            if (isNaN(result)) {
                return value;
            }
            value = result;
        }
        if (typeof value === 'number') {
            if (definition.decimal) {
                return value;
            }
            else {
                var rounding = definition.rounding ? definition.rounding : options.rounding;
                switch (rounding) {
                    case 'round':
                        return Math.round(value);
                    case 'floor':
                        return Math.floor(value);
                    case 'ceil':
                        return Math.ceil(value);
                }
            }
        }
        return value;
    };
    return NumberValidator;
}());
NumberValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'number') {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type Number"
            };
        }
        return null;
    },
    min: min,
    max: max
};

var DateValidator = (function () {
    function DateValidator() {
    }
    DateValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {
            type: cleaned(DateValidator.RULES.type, key, definition, options)
        };
        if (definition.before) {
            validators.before = cleaned(DateValidator.RULES.before, key, definition, options);
        }
        if (definition.after) {
            validators.after = cleaned(DateValidator.RULES.after, key, definition, options);
        }
        return validators;
    };
    DateValidator.clean = function (definition, value, options, object) {
        if (!options.castTypes) {
            return value;
        }
        if (typeof value === 'string') {
            if (typeof definition.dateFormat === 'string') {
                return moment(value, definition.dateFormat).toDate();
            }
            else {
                return moment(value).toDate();
            }
        }
        return value;
    };
    return DateValidator;
}());
DateValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && !(value instanceof Date)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type Date"
            };
        }
        return null;
    },
    before: function (value, key, definition) {
        if (value instanceof Date && (definition.before instanceof Date) && !moment(value).isBefore(definition.before)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be a date before " + definition.before
            };
        }
        return null;
    },
    after: function (value, key, definition) {
        if (value instanceof Date && (definition.after instanceof Date) && !moment(value).isAfter(definition.after)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be a date after " + definition.after
            };
        }
        return null;
    }
};

var ObjectValidator = (function () {
    function ObjectValidator() {
    }
    ObjectValidator.getValidatorsForKey = function (key, definition, options, object) {
        return {
            type: cleaned(ObjectValidator.RULES.type, key, definition, options)
        };
    };
    ObjectValidator.clean = function (definition, value, options, object) {
        return value;
    };
    return ObjectValidator;
}());
ObjectValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'object') {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type Object"
            };
        }
        return null;
    }
};

var SchemaValidator = (function () {
    function SchemaValidator() {
    }
    SchemaValidator.getValidatorsForKey = function (key, definition, options, object) {
        return {
            type: cleaned(SchemaValidator.RULES.type, key, definition, options),
            schema: cleaned(SchemaValidator.RULES.schema, key, definition, options)
        };
    };
    SchemaValidator.clean = function (definition, value, options, object) {
        var schema = definition.type;
        return schema.clean(value, options);
    };
    return SchemaValidator;
}());
SchemaValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && (!(isObject(value) || isArray(value)))) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be an Object or an Array of Objects"
            };
        }
        return null;
    },
    schema: function (value, key, definition, options) {
        if (value instanceof Schema || typeof value === 'object') {
            var schema = definition.type;
            var result = new ComposedValidationResult();
            result.and(schema.validate(value, options), key);
            return result;
        }
        return null;
    }
};

var BooleanValidator = (function () {
    function BooleanValidator() {
    }
    BooleanValidator.getValidatorsForKey = function (key, definition, options, object) {
        return {
            type: cleaned(BooleanValidator.RULES.type, key, definition, options)
        };
    };
    BooleanValidator.clean = function (definition, value, options, object) {
        if (!options.castTypes || typeof value === 'undefined') {
            return value;
        }
        if (typeof value === 'string') {
            if (toLower(value) === 'false') {
                return false;
            }
        }
        else if (value) {
            return true;
        }
        else {
            return false;
        }
    };
    return BooleanValidator;
}());
BooleanValidator.RULES = {
    type: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof value !== 'boolean') {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be of type Boolean"
            };
        }
        return null;
    }
};

var RootValidator = (function () {
    function RootValidator() {
    }
    // for the type rule, the value is valid if at least one type is valid
    RootValidator.createTypeValidator = function (key, types, validatorsByType) {
        return function (value, object, options) {
            for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
                var type = types_1[_i];
                var validator = validatorsByType[type.name].type;
                if (validator(value, object, options) === null) {
                    return null;
                }
            }
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " must be one of [" + Object.keys(validatorsByType).join(', ') + "]"
            };
        };
    };
    // every other rule gets passed down to every typeValidator that supports the rule
    RootValidator.createRuleValidator = function (rule, types, validatorsByType) {
        return function (value, object, options) {
            for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                var type = types_2[_i];
                var validator = validatorsByType[type.name][rule];
                if (typeof validator === 'function') {
                    return validator(value, object, options);
                }
            }
            return null;
        };
    };
    RootValidator.createArrayValidator = function (validator, key) {
        return function (value, object, options) {
            if (isArray(value)) {
                var result = new ComposedValidationResult();
                for (var index = 0; index < value.length; index++) {
                    result.and(validator(value[index], object, options), null, index);
                }
                return result;
            }
            return null;
        };
    };
    RootValidator.getValidatorsForKey = function (key, definition, options, object) {
        var validators = {};
        if (!definition.optional) {
            validators.required = cleaned(RootValidator.RULES.required, key, definition, options);
        }
        if (definition.allowedValues) {
            validators.allowedValues = cleaned(RootValidator.RULES.allowedValues, key, definition, options);
        }
        if (definition.array) {
            validators.isArray = cleaned(RootValidator.RULES.isArray, key, definition, options);
        }
        if (typeof definition.minCount !== 'undefined') {
            validators.minCount = cleaned(RootValidator.RULES.minCount, key, definition, options);
        }
        if (typeof definition.maxCount !== 'undefined') {
            validators.maxCount = cleaned(RootValidator.RULES.maxCount, key, definition, options);
        }
        if (definition.custom) {
            if (typeof definition.custom === 'function') {
                validators.custom = cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom, 'custom');
            }
            else if (typeof definition.custom === 'object') {
                for (var rule in definition.custom) {
                    if (definition.custom.hasOwnProperty(rule)) {
                        validators[rule] = cleaned(RootValidator.RULES.custom, key, definition, options, object, definition.custom[rule], rule);
                    }
                }
            }
        }
        var types = isArray(definition.type) ? definition.type : [definition.type];
        var validatorsByType = {};
        var rules = [];
        for (var _i = 0, types_3 = types; _i < types_3.length; _i++) {
            var type = types_3[_i];
            var validators_1 = this.getValidator(type).getValidatorsForKey(key, definition, options, object);
            validatorsByType[type.name] = validators_1;
            rules = union(rules, Object.keys(validators_1));
        }
        if (definition.array) {
            for (var _a = 0, rules_1 = rules; _a < rules_1.length; _a++) {
                var rule = rules_1[_a];
                validators[rule] = rule === 'type' ?
                    RootValidator.createArrayValidator(RootValidator.createTypeValidator(key, types, validatorsByType), key) :
                    RootValidator.createArrayValidator(RootValidator.createRuleValidator(rule, types, validatorsByType), key);
            }
        }
        else {
            for (var _b = 0, rules_2 = rules; _b < rules_2.length; _b++) {
                var rule = rules_2[_b];
                validators[rule] = rule === 'type' ?
                    RootValidator.createTypeValidator(key, types, validatorsByType) :
                    RootValidator.createRuleValidator(rule, types, validatorsByType);
            }
        }
        return validators;
    };
    RootValidator.getValidator = function (type) {
        switch (type) {
            case String:
                return StringValidator;
            case Number:
                return NumberValidator;
            case Date:
                return DateValidator;
            case Object:
                return ObjectValidator;
            case Boolean:
                return BooleanValidator;
            default:
                if (type instanceof Schema) {
                    return SchemaValidator;
                }
                else {
                    throw new Error("Unkown type " + type + " used in schema");
                }
        }
    };
    RootValidator.clean = function (definition, value, options, object) {
        var result = value;
        if (options.removeEmptyStrings && typeof result === 'string' && value.trim().length === 0) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        else if (options.removeEmptyObjects && typeof result === 'object' && isEmpty(result) && !isDate(result)) {
            if (definition.removeEmpty !== false) {
                result = null;
            }
        }
        var types = Array.isArray(definition.type) ? definition.type : [definition.type];
        if (typeof result === 'undefined' || result == null) {
            if (typeof definition.defaultValue !== 'undefined') {
                result = cloneDeep(definition.defaultValue);
            }
        }
        if (typeof definition.autoValue === 'function') {
            result = definition.autoValue(result, object);
        }
        for (var _i = 0, _a = reverse(types); _i < _a.length; _i++) {
            var type = _a[_i];
            result = RootValidator.getValidator(type).clean(definition, result, options, object);
        }
        return result;
    };
    return RootValidator;
}());
RootValidator.RULES = {
    isArray: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && !Array.isArray(value)) {
            return {
                property: key,
                rule: 'type',
                message: "Property " + key + " expected to be an array of type " + definition.type.name
            };
        }
        return null;
    },
    minCount: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && (typeof definition.minCount === 'number') && value.length < definition.minCount) {
            return {
                property: key,
                rule: 'minCount',
                message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at least " + definition.minCount + " elements"
            };
        }
        return null;
    },
    maxCount: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && (typeof definition.maxCount === 'number') && value.length > definition.maxCount) {
            return {
                property: key,
                rule: 'maxCount',
                message: "Property " + key + " expected to be an array of type " + definition.type.name + " with at max " + definition.maxCount + " elements"
            };
        }
        return null;
    },
    required: function (value, key, definition) {
        if (!definition.optional && (typeof value === 'undefined' || value == null)) {
            return {
                property: key,
                rule: 'required',
                message: "Missing value for property " + key
            };
        }
        return null;
    },
    allowedValues: function (value, key, definition) {
        if ((typeof value !== 'undefined' && value !== null) && typeof definition.allowedValues !== 'undefined') {
            if (definition.allowedValues.indexOf(value) === -1) {
                return {
                    property: key,
                    rule: 'allowedValues',
                    message: "Value of " + key + " is not in allowedValues"
                };
            }
        }
        return null;
    },
    custom: function (value, key, defintion, object, options, custom, rule) {
        var error = custom(value, object, options.context);
        if (typeof error === 'string') {
            return {
                property: key,
                rule: rule,
                message: error
            };
        }
        return null;
    }
};

var Schema = (function () {
    function Schema(schema, options) {
        if (options === void 0) { options = {}; }
        this.schema = schema;
        this.options = options;
        defaults(options, Schema.DefaultOptions);
    }
    Schema.prototype.cleanKey = function (key, object, options) {
        if (options === void 0) { options = {}; }
        var definition = this.schema[key];
        if (definition.type instanceof Function || definition.type instanceof Schema || isObject(definition.type)) {
            return RootValidator.clean(definition, object[key], options, object);
        }
        else {
            throw new Error("Invalid type '" + definition.type + "' used in " + this.name);
        }
    };
    Schema.prototype.validate = function (object, key, options) {
        if (typeof key === 'string') {
            options = defaults({}, options, Schema.DefaultOptions);
            var validator = this.getValidator(key, object, options);
            if (options && options.autoClean) {
                object = this.clean(object, options);
            }
            return validator(object, object, options);
        }
        else {
            options = defaults({}, key, Schema.DefaultOptions);
            var validator = this.getValidator(object, options);
            if (options && options.autoClean) {
                object = this.clean(object, options);
            }
            return validator(object, object, options);
        }
    };
    Schema.prototype.clean = function (object, options) {
        if (options === void 0) { options = {}; }
        if (typeof object === 'undefined' || object === null) {
            return object;
        }
        defaults(options, Schema.DefaultOptions);
        var result = options.mutate ? object : cloneDeep(object);
        for (var key in this.schema) {
            if (this.schema.hasOwnProperty(key)) {
                result[key] = this.cleanKey(key, object, options);
            }
        }
        return result;
    };
    Schema.prototype.extend = function (schema) {
        return this;
    };
    Schema.prototype._getValidators = function (object, options) {
        options = typeof options === 'object' ? defaults(options, this.options) : this.options;
        var validators = {};
        for (var key in this.schema) {
            if (this.schema.hasOwnProperty(key)) {
                var keyValidators = {};
                assign(keyValidators, RootValidator.getValidatorsForKey(key, this.schema[key], options, object));
                validators[key] = keyValidators;
            }
        }
        return validators;
    };
    Schema.prototype._getValidatorsForKey = function (key, object, options) {
        options = typeof options === 'object' ? defaults(options, this.options) : this.options;
        return RootValidator.getValidatorsForKey(key, this.schema[key], options, object);
    };
    Schema.prototype.getValidators = function (key, object, options) {
        if (typeof key === 'string') {
            return this._getValidatorsForKey(key, object, options);
        }
        else {
            return this._getValidators(key, object);
        }
    };
    Schema.prototype._getValidatorForKey = function (property, object, options) {
        var validators = this.getValidators(object, options);
        return function (value, object, options) {
            var result = new ComposedValidationResult();
            if (validators.hasOwnProperty(property)) {
                var propertyValidators = validators[property];
                for (var rule in propertyValidators) {
                    if (propertyValidators.hasOwnProperty(rule)) {
                        var validator = propertyValidators[rule];
                        var error = validator(value[property], object, options);
                        if (typeof error === 'string') {
                            result.and({
                                property: property,
                                rule: rule,
                                message: error
                            });
                        }
                        else if (typeof error === 'object') {
                            result.and(error);
                        }
                    }
                }
            }
            return result.isValid() ? null : result;
        };
    };
    Schema.prototype._getValidator = function (object, options) {
        var validators = this.getValidators(object, options);
        return function (value, object, options) {
            var result = new ComposedValidationResult();
            for (var property in validators) {
                if (validators.hasOwnProperty(property)) {
                    var propertyValidators = validators[property];
                    for (var rule in propertyValidators) {
                        if (propertyValidators.hasOwnProperty(rule)) {
                            var validator = propertyValidators[rule];
                            var error = validator(value[property], object, options);
                            if (typeof error === 'string') {
                                result.and({
                                    property: property,
                                    rule: rule,
                                    message: error
                                });
                            }
                            else if (typeof error === 'object') {
                                result.and(error);
                            }
                        }
                    }
                }
            }
            return result.isValid() ? null : result;
        };
    };
    Schema.prototype.getValidator = function (key, object, options) {
        if (typeof key === 'string') {
            return this._getValidatorForKey(key, object, options);
        }
        else {
            return this._getValidator(key, object);
        }
    };
    return Schema;
}());
Schema.DefaultOptions = {
    name: 'Schema',
    autoClean: false,
    allowExtras: false,
    context: {},
    mutate: false,
    trimStrings: true,
    removeEmptyStrings: true,
    removeEmptyObjects: true,
    rounding: 'round',
    removeExtras: false,
    castTypes: true
};
Schema.RegEx = {
    Email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
};

exports.Schema = Schema;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
